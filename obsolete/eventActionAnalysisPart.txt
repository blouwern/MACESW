auto SDManager = G4SDManager::GetSDMpointer();
G4HCofThisEvent* hce = event->GetHCofThisEvent();
if (fMCPHitCollection == nullptr) {
    fMCPHitCollection = static_cast<PSIMACEMCPHitsCollection*>(
        hce->GetHC(SDManager->GetCollectionID("MCPHitCollection")));
}
if (fCsIHitCollection == nullptr) {
    fCsIHitCollection = static_cast<PSIMACEGammaCsIHitsCollection*>(
        hce->GetHC(SDManager->GetCollectionID("CsIHitCollection")));
}
if (fMagSpectrometerHitCollection == nullptr) {
    fMagSpectrometerHitCollection = static_cast<PSIMACEMagSpectrometerHitsCollection*>(
        hce->GetHC(SDManager->GetCollectionID("MagSpectrometerHitCollection")));
}

auto analysisManager = PSIMACEAnalysisManager::Instance();
for (size_t i = 0; i < fMCPHitCollection->entries(); ++i) {
    analysisManager->FillMCPHitList(
        (*fMCPHitCollection)[i]->GetGlobalTime(),
        -(*fMCPHitCollection)[i]->GetPos().y() + 830.0 * mm,
        -(*fMCPHitCollection)[i]->GetPos().z()
    );
}
for (size_t i = 0; i < fCsIHitCollection->entries(); ++i) {
    analysisManager->FillCsIHitList(
        (*fCsIHitCollection)[i]->GetTime(),
        (*fCsIHitCollection)[i]->GetEnergy()
    );
}
for (size_t i = 0; i < fMagSpectrometerHitCollection->entries(); ++i) {
    analysisManager->FillMagSpectrometerHitList(
        (*fMagSpectrometerHitCollection)[i]->GetGlobalTime(),
        (*fMagSpectrometerHitCollection)[i]->GetPos().x(),
        (*fMagSpectrometerHitCollection)[i]->GetPos().y() + 418.0 * mm,
        -(*fMagSpectrometerHitCollection)[i]->GetPos().z(),
        (*fMagSpectrometerHitCollection)[i]->GetChamberNb()
    );
}

size_t MCPHits = fMCPHitCollection->entries();

G4double* timeSave = new G4double[MCPHits];
G4double* xposSave = new G4double[MCPHits];
G4double* zposSave = new G4double[MCPHits];

for (size_t i = 0; i < MCPHits; ++i) {
#if PSIMACE_EXPERIMENT_TYPE == 1
    timeSave[i] = (*fMCPHitCollection)[i]->GetGlobalTime() - 52.2 * ns + RandGauss::shoot(0., 1.4 * ns);
    xposSave[i] = -(*fMCPHitCollection)[i]->GetPos().y() + 830.0 * mm + RandGauss::shoot(0., 2.4 * mm);
    zposSave[i] = (*fMCPHitCollection)[i]->GetPos().z() + RandGauss::shoot(0., 2.4 * mm);
    analysisManager->FillMCPY((*fMCPHitCollection)[i]->GetPos().y());
    analysisManager->FillMCPZ((*fMCPHitCollection)[i]->GetPos().z());
    analysisManager->FillMCPEnergy((*fMCPHitCollection)[i]->GetPreParticleEnergy());
#elif PSIMACE_EXPERIMENT_TYPE == -1
    timeSave[i] = (*fMCPHitCollection)[i]->GetGlobalTime();
    for (size_t j = 0; j < fCsIHitCollection->entries(); ++j) {
        if ((*fCsIHitCollection)[j]->GetTime() < timeSave[i] + 1.0 * ns) {
            timeSave[i] -= 52.2 * ns + RandGauss::shoot(0., 1.4 * ns);
            xposSave[i] = -(*fMCPHitCollection)[i]->GetPos().y() + 830.0 * mm + RandGauss::shoot(0., 2.4 * mm);
            zposSave[i] = (*fMCPHitCollection)[i]->GetPos().z() + RandGauss::shoot(0., 2.4 * mm);
            analysisManager->FillMCPY((*fMCPHitCollection)[i]->GetPos().y());
            analysisManager->FillMCPZ((*fMCPHitCollection)[i]->GetPos().z());
            analysisManager->FillMCPEnergy((*fMCPHitCollection)[i]->GetPreParticleEnergy());
            break;
        }
    }
#endif
    for (size_t j = 1; j < fMagSpectrometerHitCollection->entries(); ++j) {
        //range of momentum: 15~90 MeV/c
        if ((*fMagSpectrometerHitCollection)[j]->GetKineticEnergy() > 15.0087 * MeV &&
            (*fMagSpectrometerHitCollection)[j]->GetKineticEnergy() < 90.0015 * MeV) {
            //-----------------------------Calculation of R_dca and TOF-----------------------------
            G4ThreeVector vertexPos = (*fMagSpectrometerHitCollection)[j]->GetVertexPos();
            // G4ThreeVector vTemp1 = vertexPos;
            G4ThreeVector vTemp2 = (*fMagSpectrometerHitCollection)[j - 1]->GetVertexPos();
            // vTemp1.setY(0.);

            if (vertexPos.x() != vTemp2.x()) { // && vertexPos.z()!=vTemp2.z())//vTemp1.getR()/mm < 82.0
                G4ThreeVector momemtumS = (*fMagSpectrometerHitCollection)[j]->GetDirection();
                momemtumS.setY(0.);	// Track of Electron in MagneticFiled should be a circle. Momemtum.Y doesnt contribute to its radius.
                G4double radius = momemtumS.getR() / MeV / 30.0 * m;	//radius in Guiding MagField = 0.1T

                G4ThreeVector localPos = (*fMagSpectrometerHitCollection)[j]->GetPos();
                G4ThreeVector centerL = (localPos + vertexPos) / 2.0;

                G4ThreeVector vectorTemp = localPos - vertexPos;
                vectorTemp.setY(0.);
                G4double leng = sqrt(radius * radius - 0.25 * vectorTemp.getR());	//length from 'centerL' to the center of circle

                vectorTemp = vectorTemp.unit().rotateY(90. * deg);
                G4ThreeVector centerC = centerL + vectorTemp * leng;	//center in 3D, could be uesd for TOF calcultation.

                G4double Rdca = radius + 0.9 * mm - sqrt((centerC.x() - xposSave[i]) * (centerC.x() - xposSave[i])
                    + (centerC.z() - zposSave[i]) * (centerC.z() - zposSave[i]));	//Rdca: R_distance to closest approach, R = r-d

                G4double timeE = (*fMagSpectrometerHitCollection)[j]->GetGlobalTime() -
                    (*fMagSpectrometerHitCollection)[j]->GetLocalTime();//timeave is the globaltime of AntiMu-decay

                analysisManager->FillMagSpecEnergy((*fMagSpectrometerHitCollection)[j]->GetKineticEnergy());
                analysisManager->FillTOF(timeSave[i]);
                analysisManager->FillTOFE(timeE);
                analysisManager->FillRdca(Rdca);

                break;

                //  if (vertexPos.y() < -30. * cm &&
                //     timeE - timeSave[j] < 20. * ns &&
                //     timeE - timeSave[j] > -20. * ns &&
                //     Rdca < 50.0 * mm &&
                //     Rdca > -50.0 * mm) {
                //     analysisManager->FillH2(fPositronDetectorID[1], (timeSave[j] - timeE), Rdca);
                //     if (timeE - timeSave[j] < 4.5 * ns &&
                //         timeE - timeSave[j] > -4.5 * ns &&
                //         Rdca < 12.0 * mm &&
                //         Rdca > -12.0 * mm) {
                //         analysisManager->FillH2(fElectronDetectorID, (timeSave[j] - timeE), Rdca);
                //         break;
                //     }
                // }
            }
        }
    }
}

analysisManager->WriteEvent();

delete[] timeSave;
delete[] xposSave;
delete[] zposSave;
