namespace MACE::Math {

#define MACE_MATH_RA_N_LOG_FAMILY_IMPLEMENTATION(N, b, CoreStatement)                  \
    namespace internal {                                                               \
                                                                                       \
    template<typename T>                                                               \
        requires std::same_as<T, float> or std::same_as<T, double>                     \
    MACE_ALWAYS_INLINE constexpr auto RA##N##Log##b(T x) noexcept {                    \
        if constexpr (std::numeric_limits<T>::is_iec559) {                             \
            if (std::isgreater(x, static_cast<T>(0))) [[likely]] {                     \
                using B = std::conditional_t<std::same_as<T, float>,                   \
                                             std::uint32_t,                            \
                                             std::uint64_t>;                           \
                constexpr int n = std::numeric_limits<T>::digits - 1;                  \
                constexpr int k = CHAR_BIT * sizeof(T) - 1 - n;                        \
                const auto xBits = std::bit_cast<B>(x);                                \
                std2b::assume(xBits > 0);                                              \
                std2b::assume(xBits < ~(~static_cast<B>(0) >> 1));                     \
                const auto eBits = static_cast<int>(xBits >> n);                       \
                std2b::assume(eBits > 0);                                              \
                std2b::assume(eBits < 1 << k);                                         \
                if (eBits != (1 << k) - 1) [[likely]] {                                \
                    const auto exponent = eBits - ((1 << (k - 1)) - 1);                \
                    x = std::bit_cast<T>((xBits | ~static_cast<B>(0) << n) << 2 >> 2); \
                    CoreStatement                                                      \
                } else {                                                               \
                    return std::numeric_limits<T>::infinity();                         \
                }                                                                      \
            } else if (std::islessequal(x, static_cast<T>(0))) [[likely]] {            \
                if (x == 0) {                                                          \
                    std::feraiseexcept(FE_DIVBYZERO);                                  \
                    return -std::numeric_limits<T>::infinity();                        \
                } else {                                                               \
                    std::feraiseexcept(FE_INVALID);                                    \
                    return std::numeric_limits<T>::quiet_NaN();                        \
                }                                                                      \
            } else {                                                                   \
                std2b::assume(x != x);                                                 \
                return x;                                                              \
            }                                                                          \
        } else {                                                                       \
            return std::log##b(x);                                                     \
        }                                                                              \
    }                                                                                  \
                                                                                       \
    } /* namespace internal */                                                         \
                                                                                       \
    template<std::floating_point T>                                                    \
    constexpr T RA##N##Log##b(T x) noexcept {                                          \
        static_assert(std::same_as<decltype(internal::RA##N##Log##b(x)), T>);          \
        return internal::RA##N##Log##b(x);                                             \
    }                                                                                  \
                                                                                       \
    template<std::floating_point T>                                                    \
    constexpr T RA##N##Log##b(std::integral auto x) noexcept {                         \
        static_assert(std::same_as<decltype(internal::RA##N##Log##b<T>(x)), T>);       \
        return internal::RA##N##Log##b<T>(x);                                          \
    }

#define MACE_MATH_RA_N_LOG_CORE_STATEMENT(rational) \
    constexpr auto ln2 = std::numbers::ln2_v<T>;    \
    const auto r = rational;                        \
    return exponent * ln2 + (x * r - r);
#define MACE_MATH_RA_N_LOG_DEFINITION(N, rational) \
    MACE_MATH_RA_N_LOG_FAMILY_IMPLEMENTATION(N, , MACE_MATH_RA_N_LOG_CORE_STATEMENT(rational))

MACE_MATH_RA_N_LOG_DEFINITION(
    2, QinRational(x,
                   {1.59335600355316158862256902280174696L,
                    1.00000000000000000000000000000000000L},
                   {0.595597486010015443028893181359739291L,
                    1.70125733485393471420171782056274283L,
                    0.296501182689211431391958020879264842L}))
MACE_MATH_RA_N_LOG_DEFINITION(
    3, QinRational(x,
                   {2.35902031055879741771578914165316506L,
                    5.34414294368249264113221556435105995L,
                    1.00000000000000000000000000000000000L},
                   {0.707077174233076950673206307466109736L,
                    4.54431607741540506835313769702340698L,
                    3.20395130938650510065980174773754744L,
                    0.247818693206302939161858953777160854L}))
MACE_MATH_RA_N_LOG_DEFINITION(
    4, QinRational(x,
                   {3.42026643840447329823759184136547305L,
                    16.9391943393549854818446940699055644L,
                    11.2647325376771582487420013095427588L,
                    1.00000000000000000000000000000000000L},
                   {0.891938528237730859617750586931463422L,
                    10.1950543641405420353319537268346498L,
                    16.2464982760645240580479581678018617L,
                    5.07010431751100254239266878472239149L,
                    0.220597829482817533433955954523429738L}))
MACE_MATH_RA_N_LOG_DEFINITION(
    5, QinRational(x,
                   {4.91450165528015359869501472869497493L,
                    42.8162996677672637296710403912628258L,
                    61.7235879251983343775153284721324998L,
                    19.3857666378289063748147527895030898L,
                    1.00000000000000000000000000000000000L},
                   {1.16070659081949524107866951355645319L,
                    20.7393767975932441783832604042058788L,
                    58.9045082838859670382808800187350885L,
                    41.5525568997888614453486971163262505L,
                    7.28024727417885992599766119278232169L,
                    0.202760039808230251606968135987397643L}))
MACE_MATH_RA_N_LOG_DEFINITION(
    6, QinRational(x,
                   {7.02829409402350007790278087270308057L,
                    95.3047250884541952994478698110830094L,
                    240.270661291933349103342932882532111L,
                    163.048940862099750714693488841926874L,
                    29.7321656165333313527864199953904060L,
                    1.00000000000000000000000000000000000L},
                   {1.53886816756006259754904281835354794L,
                    39.6112069874030544978320497006397172L,
                    176.082875417687367827418449848461861L,
                    221.470175304269126394974318408865630L,
                    87.6718141874529490983271407223469624L,
                    9.81989561636166344658735431800105350L,
                    0.189951272309902685485136586966708453L}))

#undef MACE_MATH_RA_N_LOG_DEFINITION
#undef MACE_MATH_RA_N_LOG_CORE_STATEMENT

#define RA_N_LOG2_CORE_STATEMENT(rational) \
    const auto r = rational;               \
    return exponent + (x * r - r);
#define RA_N_LOG2_DEFINITION(N, rational) \
    MACE_MATH_RA_N_LOG_FAMILY_IMPLEMENTATION(N, 2, RA_N_LOG2_CORE_STATEMENT(rational))

RA_N_LOG2_DEFINITION(
    2, QinRational(x,
                   {1.59335600355316158862256902280174696L,
                    1.00000000000000000000000000000000000L},
                   {0.412836718176433674683931644145432726L,
                    1.17922172506093162381614880885570943L,
                    0.205518958813716166576584940236223843L}))
RA_N_LOG2_DEFINITION(
    3, QinRational(x,
                   {2.35902031055879741771578914165316506L,
                    5.34414294368249264113221556435105995L,
                    1.00000000000000000000000000000000000L},
                   {0.490108549757950498189934474183752610L,
                    3.14987987663371818374475618875916155L,
                    2.22080981675260104787013032168641533L,
                    0.171774828485998955352531516488443491L}))
RA_N_LOG2_DEFINITION(
    4, QinRational(x,
                   {3.42026643840447329823759184136547305L,
                    16.9391943393549854818446940699055644L,
                    11.2647325376771582487420013095427588L,
                    1.00000000000000000000000000000000000L},
                   {0.618244676080770310118246533269297871L,
                    7.06667318815938270591598257977916732L,
                    11.2612144740261368530155766783804348L,
                    3.51432851282755716207865163071357729L,
                    0.152906763543658551640828360455602914L}))
RA_N_LOG2_DEFINITION(
    5, QinRational(x,
                   {4.91450165528015359869501472869497493L,
                    42.8162996677672637296710403912628258L,
                    61.7235879251983343775153284721324998L,
                    19.3857666378289063748147527895030898L,
                    1.00000000000000000000000000000000000L},
                   {0.804540500883879226516142830741558082L,
                    14.3754405538221047473466876551385444L,
                    40.8294938392455006112477845216550536L,
                    28.8020376601453512365835910469401344L,
                    5.04628287187630388589432999984873313L,
                    0.140542549923297072919930222344864952L}))
RA_N_LOG2_DEFINITION(
    6, QinRational(x,
                   {7.02829409402350007790278087270308057L,
                    95.3047250884541952994478698110830094L,
                    240.270661291933349103342932882532111L,
                    163.048940862099750714693488841926874L,
                    29.7321656165333313527864199953904060L,
                    1.00000000000000000000000000000000000L},
                   {1.06666213159770688235134219868049707L,
                    27.4563964418948323015100317468237947L,
                    122.051348640658101290030714098930758L,
                    153.511427590270972759177631057835722L,
                    60.7694708186084241725524228405000786L,
                    6.80663295987405336745965824404903979L,
                    0.131664188845383456466214732474243828L}))

#undef RA_N_LOG2_DEFINITION
#undef RA_N_LOG2_CORE_STATEMENT

#define RA_N_LOG10_CORE_STATEMENT(rational)                                                      \
    constexpr T ln2_ln10 = std::numbers::ln2_v<long double> / std::numbers::ln10_v<long double>; \
    const auto r = rational;                                                                     \
    return exponent * ln2_ln10 + (x * r - r);
#define RA_N_LOG10_DEFINITION(N, rational) \
    MACE_MATH_RA_N_LOG_FAMILY_IMPLEMENTATION(N, 10, RA_N_LOG10_CORE_STATEMENT(rational))

RA_N_LOG10_DEFINITION(
    2, QinRational(x,
                   {1.59335600355316158862256902280174696L,
                    1.00000000000000000000000000000000000L},
                   {1.37141389271139123218832666175527757L,
                    3.91728977858144958157766080173496058L,
                    0.682719203315282432117543971897271280L}))
RA_N_LOG10_DEFINITION(
    3, QinRational(x,
                   {2.35902031055879741771578914165316506L,
                    5.34414294368249264113221556435105995L,
                    1.00000000000000000000000000000000000L},
                   {1.62810536098543653322297170720697690L,
                    10.4636744577098873850995279926757182L,
                    7.37737052367212028166066669596461962L,
                    0.570623628742097930550583579033127698L}))
RA_N_LOG10_DEFINITION(
    4, QinRational(x,
                   {3.42026643840447329823759184136547305L,
                    16.9391943393549854818446940699055644L,
                    11.2647325376771582487420013095427588L,
                    1.00000000000000000000000000000000000L},
                   {2.05376435898724775366825307861130020L,
                    23.4749802011339012723573879608826733L,
                    37.4089447438196350178642498811503555L,
                    11.6743466214255843144302534056474940L,
                    0.507945273713978042942370144592438109L}))
RA_N_LOG10_DEFINITION(
    5, QinRational(x,
                   {4.91450165528015359869501472869497493L,
                    42.8162996677672637296710403912628258L,
                    61.7235879251983343775153284721324998L,
                    19.3857666378289063748147527895030898L,
                    1.00000000000000000000000000000000000L},
                   {2.67262569336090918208804648859334376L,
                    47.7541798521247935199315215899942102L,
                    135.632642684620103759147817713843758L,
                    95.6782980932407101578606118971811051L,
                    16.7633888468347777886396804817704014L,
                    0.466872245117310258716301290599760910L}))
RA_N_LOG10_DEFINITION(
    6, QinRational(x,
                   {7.02829409402350007790278087270308057L,
                    95.3047250884541952994478698110830094L,
                    240.270661291933349103342932882532111L,
                    163.048940862099750714693488841926874L,
                    29.7321656165333313527864199953904060L,
                    1.00000000000000000000000000000000000L},
                   {3.54337490270686341193897724517586591L,
                    91.2081747246958544265429358879896450L,
                    405.445804068294628614563963790753578L,
                    509.953924198388126292848251781414817L,
                    201.871812423773042548307830842575571L,
                    22.6111452609919423873848858674787347L,
                    0.437378968016034569982225267407814795L}))

#undef RA_N_LOG10_DEFINITION
#undef RA_N_LOG10_CORE_STATEMENT

#undef MACE_MATH_RA_N_LOG_FAMILY_IMPLEMENTATION

} // namespace MACE::Math
